
    private static void openTradersInt(String username, String password) {

        Scanner scn = new Scanner(System.in);
        // Account account = interfDB.getAccount(false, username, password);

        System.out.println("\n||         Traders Interface           ||");
        System.out.println("-----------------------------------------");
		// System.out.println("Welcome " + account.getName() + "!\n");

        boolean isMarketOpen = isMarketOpen();

		while(true)
		{
			if(isMarketOpen)
			{
				System.out.println("Current date: "); //dbAdapter.getCurrentDate());
				System.out.println("What would you like to do today?\n");
				System.out.println("1. Deposit into Market Account");
				System.out.println("2. Withdraw from Market Account");
				System.out.println("3. Buy Stocks");
				System.out.println("4. Sell Stocks");
				System.out.println("5. Show Market Account Balance");
				System.out.println("6. Show Stock Transaction History");
				System.out.println("7. List Current Stock Price and Actor Profile");
				System.out.println("8. List Movie Information");
				System.out.println("9. Log out");
                System.out.print("Enter the number corresponding to the option desired: ");

			}
			else
			{
				//if market is closed
				System.out.println();
				System.out.println("\nThe market is closed. No buying or selling of stocks is allowed.");
				System.out.println("What would you like to do today?\n");
				System.out.println("1. Deposit into Market Account");
				System.out.println("2. Withdraw from Market Account");
				System.out.println("3. Show Market Account Balance");
				System.out.println("4. Show Stock Transaction History");
				System.out.println("5. List Current Stock Price and Actor Profile");
				System.out.println("6. List Movie Information");
				System.out.println("7. Log out");
                System.out.print("Enter the number corresponding to the option desired: ");

			}

			//check for non-int input
			if(!scn.hasNextInt())
			{
				System.out.println();
				System.out.println("Error! Invalid Input!");
				scn.nextLine();
				continue;
			}
			else
			{
				int choice = scn.nextInt();
				scn.nextLine();
				//handle invalid input
				if((isMarketOpen && (choice < 1 || choice > 9)) || (!isMarketOpen && (choice < 1 || choice > 7)))
				{
					System.out.println("Invalid input. Please choose one of the 9 options below.");
					continue;
				}
				if(isMarketOpen)
				{
					//switch on choice
					switch(choice)
					{
						case 1: showDepositOrWithdraw(0);
								break;
						case 2: showDepositOrWithdraw(1);
								break;
						case 3: showBuy();
								break;
						case 4: showSell();
								break;
						case 5: showMarketBalance();
								break;
						case 6: showStockTransactions();
								break;
						case 7: showCurrentStockPrice();
								break;
						case 8: showMovieInfo();
								break;
						default: return;
					}
				} else {
					//switch on choice
					switch(choice) {
                        case 1: showDepositOrWithdraw(0);
								break;
						case 2: showDepositOrWithdraw(1);
								break;
						case 3: showMarketBalance();
								break;
						case 4: showStockTransactions();
								break;
						case 5: showCurrentStockPrice();
								break;
						case 6: showMovieInfo();
								break;
						default: return;
					}
				}

			}
		}
    }

    private static void showMovieInfo() {
    }
    private static void showCurrentStockPrice() {
    }
    private static void showStockTransactions() {
    }
    private static void showMarketBalance() {
    }
    private static void showSell() {
    }
    private static void showBuy() {
    }
    private static void showDepositOrWithdraw(int i) {
    }
    private static boolean isMarketOpen() {
        return false;
    }

\
public void addInterest(double percent) {
    String loginSql = "SELECT t_id \n"
    + "FROM MarketAccounts ";

    ArrayList<Integer> taxidList = new ArrayList<Integer>();

    try (Connection conn = DriverManager.getConnection(Main.url);
        PreparedStatement pstmt = conn.prepareStatement(loginSql)) {

        ResultSet rs = pstmt.executeQuery();

        while (rs.next()) {
            taxidList.add(rs.getInt("taxid"));
        }

        conn.close();
    } catch (SQLException e) {
        System.out.println(e.getMessage());
    }

    // calculate average monthly balance for each account
    ArrayList<Double> avgBalList = new ArrayList<Double>();
    for (int i = 0; i < taxidList.size(); i++ ) {

        String avgBalSql = "SELECT AVG(balance) as avg \n"
        + "FROM DailyBalance "
        + "WHERE taxid = ?";

        int aid = taxidList.get(i);

        try (Connection conn = DriverManager.getConnection(Main.url);
            PreparedStatement pstmt = conn.prepareStatement(avgBalSql)) {

            pstmt.setInt(1,aid);
            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {
                avgBalList.add(rs.getDouble("avg"));
            }

            conn.close();
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    for (int i = 0; i < taxidList.size(); i++) {
        int taxid = taxidList.get(i);
        double balance = avgBalList.get(i);

        double interestMoney = balance * percent * 0.01;
        interestMoney = (double) Math.round(interestMoney * 100) / 100;

        // Update Market account balance
        String systemupdatesql = "UPDATE MarketAccounts SET balance = balance + ? WHERE taxid = ?";

        try (Connection conn = DriverManager.getConnection(Main.url);
            PreparedStatement pstmt = conn.prepareStatement(systemupdatesql)) {

            pstmt.setDouble(1, interestMoney);
            pstmt.setInt(2, taxid);
            pstmt.executeUpdate();

            System.out.println("Added interest amount " + Double.toString(interestMoney) + " for user " + Integer.toString(taxid));
            conn.close();
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }

        //Store transaction
        Sys s = new Sys();
        String today = s.getToday();
        Transaction t = new Transaction();
        t.storeInterestTransaction(today, taxid, interestMoney);

    }
}

// returns list of taxid who have traded at least 1000 shares in last month
public ArrayList<Integer> getActiveCustomers() {

    String activesql = "SELECT taxid \n"
    + "FROM (\n"
        + "SELECT taxid, SUM(shares) as sum \n"
        + "FROM Transactions \n"
        + "WHERE type = 'b' OR type = 's' \n"
        + "GROUP BY taxid )"
    + "WHERE sum > 999";

    ArrayList<Integer> list = new ArrayList<Integer>();

    try (Connection conn = DriverManager.getConnection(Main.url);
        PreparedStatement pstmt = conn.prepareStatement(activesql)) {

        ResultSet rs = pstmt.executeQuery();
        while (rs.next()) {
            list.add(rs.getInt("taxid"));
        }
        conn.close();
    } catch (SQLException e) {
        System.out.println(e.getMessage());
    }
    return list;
}

// returns list of taxid who have earned at least $10000 (from stocks and interest)
public ArrayList<Integer> getDTER() {

    String dtersql = "SELECT taxid \n"
    + "FROM (\n"
        + "SELECT taxid, SUM(earnings) as sum \n"
        + "FROM Transactions \n"
        + "GROUP BY taxid )"
    + "WHERE sum > 10000";

    ArrayList<Integer> list = new ArrayList<Integer>();

    try (Connection conn = DriverManager.getConnection(Main.url);
        PreparedStatement pstmt = conn.prepareStatement(dtersql)) {

        ResultSet rs = pstmt.executeQuery();
        while (rs.next()) {
            list.add(rs.getInt("taxid"));
        }
        conn.close();
    } catch (SQLException e) {
        System.out.println(e.getMessage());
    }
    return list;
}

public Object[][] getCustReport(int taxid) {

    // count stock accounts
    String countsql = "SELECT COUNT(*) as count\n"
    + "FROM Stocks \n"
    + "WHERE taxid = ? ";

    int count = 0;

    try (Connection conn = DriverManager.getConnection(Main.url);
    PreparedStatement pstmt = conn.prepareStatement(countsql)) {

        pstmt.setInt(1, taxid);
        ResultSet rs = pstmt.executeQuery();

        while (rs.next()) {
            count = rs.getInt("count");
        }
        conn.close();
    } catch (SQLException e) {
        System.out.println(e.getMessage());
    }

    Object[][] res = new Object[count][3];

    String reportsql = "SELECT shares, aid, buyprice \n"
    + "FROM Stocks \n"
    + "WHERE taxid = ?";

    try (Connection conn = DriverManager.getConnection(Main.url);
        PreparedStatement pstmt = conn.prepareStatement(reportsql)) {

        pstmt.setInt(1, taxid);
        ResultSet rs = pstmt.executeQuery();

        int i = 0;
        while (rs.next()) {
            res[i][0] = Integer.toString(rs.getInt("shares"));
            res[i][1] = rs.getString("aid");
            res[i][2] = new DecimalFormat("#.00").format(rs.getDouble("buyprice"));
            i++;
        }
        conn.close();
    } catch (SQLException e) {
        System.out.println(e.getMessage());
    }
    return res;
}

}